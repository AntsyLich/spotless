pluginManagement {
	plugins {
		id 'com.diffplug.spotless'                 version '6.5.0'
		// https://plugins.gradle.org/plugin/com.gradle.plugin-publish
		id 'com.gradle.plugin-publish'             version '0.21.0'
		// https://github.com/gradle-nexus/publish-plugin/releases
		id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
		// https://github.com/spotbugs/spotbugs-gradle-plugin/releases
		id 'com.github.spotbugs'                   version '5.0.7'
		// https://github.com/diffplug/spotless-changelog
		id 'com.diffplug.spotless-changelog'       version '2.4.0'
		// https://github.com/diffplug/goomph/blob/main/CHANGES.md
		id 'com.diffplug.p2.asmaven'               version '3.27.0' // DO NOT UPDATE, see https://github.com/diffplug/spotless/pull/874
		// https://github.com/gradle/test-retry-gradle-plugin/releases
		id 'org.gradle.test-retry'                 version '1.4.0'
		// https://github.com/radarsh/gradle-test-logger-plugin/blob/develop/CHANGELOG.md
		id 'com.adarshr.test-logger'               version '3.2.0'
	}
}
plugins {
	id 'com.diffplug.spotless'                 apply false
	id 'com.gradle.plugin-publish'             apply false
	id 'io.github.gradle-nexus.publish-plugin' apply false
	id 'com.github.spotbugs'                   apply false
	id 'com.diffplug.spotless-changelog'       apply false
	id 'com.diffplug.p2.asmaven'               apply false
	id 'org.gradle.test-retry'                 apply false
	id 'com.adarshr.test-logger'               apply false
}
if (System.env['CI'] != null) {
	// use the remote buildcache on all CI builds
	buildCache {
		def cred = {
			if (System.env[it] != null) {
				return System.env[it]
			} else {
				return System.getProperty(it)
			}
		}
		remote(HttpBuildCache) {
			url = 'https://buildcache.diffplug.com/cache/'
			// but we only push if it's a trusted build (not PRs)
			String user = cred('buildcacheuser')
			String pass = cred('buildcachepass')
			if (user != null && pass != null) {
				push = true
				credentials {
					username = user
					password = pass
				}
			} else {
				credentials { username = 'anonymous' }
			}
		}
	}
}

rootProject.name = 'spotless'

include 'lib'		// reusable library with no dependencies
include 'testlib'	// library for sharing test infrastructure between the projects below

include 'lib-extra'	// reusable library with lots of dependencies
include 'plugin-gradle'	// gradle-specific glue code

def getStartProperty(java.lang.String name) {
	def value = startParameter.getProjectProperties().get(name)
	if(null != value) {
		return value
	}
	// user properties are not available in the startParameter
	def userPropertiesFile = new java.io.File(startParameter.getGradleUserHomeDir(), 'gradle.properties')
	def userProperties = new java.util.Properties()
	if (userPropertiesFile.exists()) {
		userProperties.load(userPropertiesFile.newReader())
	}
	return userProperties.get(name)

}

if (System.getenv('SPOTLESS_EXCLUDE_MAVEN') != 'true' && getStartProperty('SPOTLESS_EXCLUDE_MAVEN') != 'true' && System.getenv('JITPACK') != 'true') {
	include 'plugin-maven'	// maven-specific glue code
}

// include external (_ext) projects from development builds
String includeExt = getStartProperty('com.diffplug.spotless.include.ext')
if (includeExt == 'true' || includeExt == 'ifgitdiff') {
	file('_ext').eachDirMatch(~/^(?!(\.|gradle)).*/) { dir ->
		if (includeExt == 'ifgitdiff') {
			apply plugin: 'com.diffplug.if-git-diff'
			ifGitDiff {
				baseline 'origin/ifgitdiff'
				inFolder(dir) {
					include dir.name
					project(":${dir.name}").projectDir = dir
				}
			}
		} else {
			include dir.name
			project(":${dir.name}").projectDir = dir
		}
	}
}
