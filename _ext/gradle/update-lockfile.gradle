ext {
	// Eclipse version (numerical format, up to 3 dot separated digits)
	if (!project.hasProperty('VER_ECLIPSE')) {
		vEclipse = "VER_ECLIPSE property not defined for project"
	}
	else {
		if(3 > VER_ECLIPSE.count('.')) {
			vEclipse = VER_ECLIPSE + ".0".repeat(2-VER_ECLIPSE.count('.'))
		}
		else {
			vEclipse = VER_ECLIPSE
		}
	}

	dependencyLockFile = project.file("gradle.lockfile")
	changesFile = project.file("CHANGES.md")

	// Formatter step dependency lock file
	def projectResourceDirName = project.name.replace('-', '_') + "_formatter"
	stepLockFile = project(':lib-extra').file("src/main/resources/com/diffplug/spotless/extra/${projectResourceDirName}/v${vEclipse}.lockfile")
	if (!project.hasProperty('stepLockFileComment')) {
		stepLockFileComment = "File generated by 'prepareLibExtraLockFile' task."
	}
}


// Lock implementation dependencies
configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}
dependencyLocking {
	//Lock file can be used manually as input for :lib-extra lockfiles
    lockFile = dependencyLockFile
}

// Add/Push dependency lock file together with change-log
if (gradle.startParameter.writeDependencyLocks) {
	def changelogBumpLockfileGitAdd = tasks.register('changelogBumpLockfileGitAdd') {
		/* changelogBump is executed after compile/check.
		   The write of new lock file should be accomplished during configuration. */
		dependsOn(tasks.named('changelogBump'))
		// do the git add
		doLast {
			exec { commandLine 'git', 'add' , dependencyLockFile.getAbsolutePath() }
		}
	}
	afterEvaluate {
		tasks.named('changelogPush').configure {
			dependsOn changelogBumpLockfileGitAdd
		}
	}
}

// Prepare dependency lock file for lib-extra
import java.util.stream.Collectors

task generateLibExtraLockFile {
	description = "Generates lib-extra project dependency lock file based on the project 'gradle.lockfile'."
	group = "Publishing"
	inputs.files(dependencyLockFile)
	inputs.files(changesFile)
	inputs.property('vEclipse', vEclipse)
	inputs.property('stepLockFileComment', stepLockFileComment)
	outputs.files(stepLockFile)

	doLast {
		def dependencyLockEntries = dependencyLockFile.text.readLines()
		//Filter slf4j-api, since Maven and Gradle provide API and implementation with a matching version.
		dependencyLockEntries = dependencyLockEntries
				.stream()
				.filter( e -> e.contains("=") && e.contains("compileClasspath") && !e.contains("slf4j-api") )
                .map(e -> e.split("=")[0])
				.collect(Collectors.toList())
		def latestRelease = changesFile.getText('UTF-8')
			.readLines()
			.stream()
			.filter( e -> e.contains('## [') && e.contains('] - ') )
			.map(e -> e.split('[\\[\\]]')[1])
			.findFirst().orElse('Unable to deterine latest version from change log')

		dependencyLockEntries.add(0, "com.diffplug.spotless:spotless-${project.name}:${latestRelease}")

		stepLockFile.write("# ${stepLockFileComment}\n")
		dependencyLockEntries.each({
			stepLockFile << "${it}\n"
		})
	}
}
